Hi there,
We will be using this Google doc for our mock interview.

Here's the breakdown of our schedule
45 mins - Mock Interview
15 mins - Feedback

Thanks,
Chandra

https://www.educative.io/collection/5668639101419520/5649050225344512?authorName=Design%20Gurus

Question:

Given a set of non-overlapping intervals, insert a new interval into the intervals (merge if necessary).
	
You may assume that the intervals were initially sorted according to their start times.
	
Example 1:	
Input: intervals = [[1,3],[6,9]], new Interval = [2,5]

Output: [[1,5],[6,9]]
	 
Example 2:
Input: intervals = [[1,2],[3,5],[6,7],[8,10],[12,16]], new Interval = [4,8]
Output: [[1,2],[3,10],[12,16]]
// result = []
// newArrStartTime = interval[0]
// newArrEndTIme = interval[1]
// iterate initialArray 
// if (as soon as value1 >= newArrStartTime) 
	// if (as soon as value2 >= endTime) if index === 3
		// 
		// currentNewValue = [startTime of currentValue, 
		// value2 is startTime of some interval
			// result.push (  )
	// else 
		// result.push(initialArr.slice(3 + 1) 
// else 
	// result.push( value I mean innerArray)

currentValue = [startTime of innerCurrent, endTime]
Result.push (currentValue) [3, 10] // 
// Time O(n) n -length initialArray.O(logn) -> 
initialArr[i] = currentValue. 
I = 1
I = 2
I = 4
J = 2
[[1,2], [3, 10], [12,16]]
Return initialArr.slice(0, j + 1).
// Space O(1). 

Const insertInterval = (initialArrayOfIntervals, insertInterval) => {
	Let i = 0;
	Let j = 0;
	Const startTimeInsertInterval = insertInterval[0]
	Const endTimeInsertInterval = insertInterval[1]
	Let newArr = [] // int array

	while(i < initialArrayOfIntervals.length) {
		Const currentStartTime = initialArrayOfIntervals[i][0]
		Const currentEndTime = initialArrayOfIntervals[i][1]
		Let currentValue = initialArrayOfIntervals[i]
		If (currentStartTime >=  startTimeInsertInterval) {
			newArr.push(startTimeInsertInterval)
			J = i
		} else if (startTimeInsertInterval < currentEndTime) {
			newArr.push(currentStartTime)
			J = i
		} else if (endTimeInsertInterval <= currentStartTime || endTimeInsertInterval <= currentEndTime) {
			newArr.push(Math.max(currentStartTime, currentEndTime))
			
}
i++;
}

}
Input: intervals = [[1,2],[3,5],[6,7],[8,10],[12,16]], new Interval = [4,8]

[[1,2] [3, 10], 
// clarify conditions, clearly understand, edge cases, ask questions about edge cases, 
// do not write pseudo before discuss idea before, try to save time, use variables only if needed,
// remember about whiteboard, cause of limit of space, abbreviate big variable names cause of time complexity. 
// educative - design concepts, website, buy package,  
////////////////////////